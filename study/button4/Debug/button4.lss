
button4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000354  000003e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000354  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800114  00800114  000003fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000042c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f45  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e9  00000000  00000000  00001441  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000585  00000000  00000000  00001d2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  000022b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b7  00000000  00000000  00002468  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000614  00000000  00000000  0000291f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002f33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	04 c1       	rjmp	.+520    	; 0x20e <__vector_1>
   6:	00 00       	nop
   8:	3a c1       	rjmp	.+628    	; 0x27e <__vector_2>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e5       	ldi	r30, 0x54	; 84
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e1       	ldi	r26, 0x14	; 20
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 31       	cpi	r26, 0x15	; 21
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	37 d1       	rcall	.+622    	; 0x332 <main>
  c4:	45 c1       	rjmp	.+650    	; 0x350 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <i2c_init>:
#define BUTTON_B PD3 // INT1
#define BUTTON_C PD4 // 일반 버튼 (폴링 방식)

// I2C 및 LCD 관련 함수
void i2c_init() {
	TWSR = 0x00;             // 프리스케일러 설정 (1)
  c8:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
	TWBR = 0x47;             // 비트레이트 설정 (100kHz)
  cc:	87 e4       	ldi	r24, 0x47	; 71
  ce:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
	TWCR = (1 << TWEN);      // I2C 활성화
  d2:	84 e0       	ldi	r24, 0x04	; 4
  d4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  d8:	08 95       	ret

000000da <i2c_start>:
}

void i2c_start() {
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
  da:	84 ea       	ldi	r24, 0xA4	; 164
  dc:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1 << TWINT))); // 시작 조건 완료 대기
  e0:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  e4:	88 23       	and	r24, r24
  e6:	e4 f7       	brge	.-8      	; 0xe0 <i2c_start+0x6>
}
  e8:	08 95       	ret

000000ea <i2c_stop>:

void i2c_stop() {
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
  ea:	84 e9       	ldi	r24, 0x94	; 148
  ec:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	85 e3       	ldi	r24, 0x35	; 53
  f2:	8a 95       	dec	r24
  f4:	f1 f7       	brne	.-4      	; 0xf2 <i2c_stop+0x8>
  f6:	00 00       	nop
  f8:	08 95       	ret

000000fa <i2c_write>:
	_delay_us(10); // 짧은 대기
}

void i2c_write(uint8_t data) {
	TWDR = data;             // 데이터 레지스터에 데이터 쓰기
  fa:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1 << TWINT) | (1 << TWEN); // 데이터 전송
  fe:	84 e8       	ldi	r24, 0x84	; 132
 100:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1 << TWINT)));    // 전송 완료 대기
 104:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 108:	88 23       	and	r24, r24
 10a:	e4 f7       	brge	.-8      	; 0x104 <i2c_write+0xa>
}
 10c:	08 95       	ret

0000010e <lcd_send>:

void lcd_send(uint8_t value, uint8_t mode) {
 10e:	cf 93       	push	r28
	uint8_t data = value & 0xF0; // 상위 4비트 전송
 110:	80 7f       	andi	r24, 0xF0	; 240
	data |= mode;                // RS 설정 (명령어 또는 데이터 모드)
 112:	c8 2f       	mov	r28, r24
 114:	c6 2b       	or	r28, r22
	data |= 0x08;                // 백라이트 켜기 (0x08)

	i2c_start();
 116:	e1 df       	rcall	.-62     	; 0xda <i2c_start>
	i2c_write(0x27 << 1);  // LCD 주소 (I2C SLA+W)
 118:	8e e4       	ldi	r24, 0x4E	; 78
 11a:	ef df       	rcall	.-34     	; 0xfa <i2c_write>
	i2c_write(data | 0x04); // 데이터 전송 후 Enable 비트 설정
 11c:	8c 2f       	mov	r24, r28
 11e:	8c 60       	ori	r24, 0x0C	; 12
 120:	ec df       	rcall	.-40     	; 0xfa <i2c_write>
 122:	85 e0       	ldi	r24, 0x05	; 5
 124:	8a 95       	dec	r24
 126:	f1 f7       	brne	.-4      	; 0x124 <lcd_send+0x16>
 128:	00 00       	nop
	_delay_us(1);
	i2c_write(data & ~0x04); // Enable 비트 클리어
 12a:	8c 2f       	mov	r24, r28
 12c:	8b 7f       	andi	r24, 0xFB	; 251
 12e:	88 60       	ori	r24, 0x08	; 8
 130:	e4 df       	rcall	.-56     	; 0xfa <i2c_write>
 132:	87 ec       	ldi	r24, 0xC7	; 199
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <lcd_send+0x28>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <lcd_send+0x2e>
	_delay_us(50);
	i2c_stop();
 13c:	00 00       	nop
 13e:	d5 df       	rcall	.-86     	; 0xea <i2c_stop>
}
 140:	cf 91       	pop	r28
 142:	08 95       	ret

00000144 <lcd_command>:

void lcd_command(uint8_t command) {
 144:	cf 93       	push	r28
 146:	c8 2f       	mov	r28, r24
	lcd_send(command & 0xF0, 0x00); // 상위 4비트 명령어 전송
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	80 7f       	andi	r24, 0xF0	; 240
 14c:	e0 df       	rcall	.-64     	; 0x10e <lcd_send>
	lcd_send((command << 4), 0x00); // 하위 4비트 명령어 전송
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	8c 2f       	mov	r24, r28
 152:	82 95       	swap	r24
 154:	80 7f       	andi	r24, 0xF0	; 240
 156:	db df       	rcall	.-74     	; 0x10e <lcd_send>
}
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <lcd_data>:

void lcd_data(uint8_t data) {
 15c:	cf 93       	push	r28
 15e:	c8 2f       	mov	r28, r24
	lcd_send(data & 0xF0, 0x01);   // 상위 4비트 데이터 전송 (RS = 1)
 160:	61 e0       	ldi	r22, 0x01	; 1
 162:	80 7f       	andi	r24, 0xF0	; 240
 164:	d4 df       	rcall	.-88     	; 0x10e <lcd_send>
	lcd_send((data << 4), 0x01);   // 하위 4비트 데이터 전송 (RS = 1)
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	8c 2f       	mov	r24, r28
 16a:	82 95       	swap	r24
 16c:	80 7f       	andi	r24, 0xF0	; 240
 16e:	cf df       	rcall	.-98     	; 0x10e <lcd_send>
}
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 174:	2f ef       	ldi	r18, 0xFF	; 255
 176:	80 e7       	ldi	r24, 0x70	; 112
 178:	92 e0       	ldi	r25, 0x02	; 2
 17a:	21 50       	subi	r18, 0x01	; 1
 17c:	80 40       	sbci	r24, 0x00	; 0
 17e:	90 40       	sbci	r25, 0x00	; 0
 180:	e1 f7       	brne	.-8      	; 0x17a <lcd_init+0x6>
 182:	00 c0       	rjmp	.+0      	; 0x184 <lcd_init+0x10>
 184:	00 00       	nop

void lcd_init() {
	_delay_ms(50);                // LCD 초기화 대기
	lcd_command(0x30);            // 초기화 명령
 186:	80 e3       	ldi	r24, 0x30	; 48
 188:	dd df       	rcall	.-70     	; 0x144 <lcd_command>
 18a:	8f e1       	ldi	r24, 0x1F	; 31
 18c:	9e e4       	ldi	r25, 0x4E	; 78
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <lcd_init+0x1a>
 192:	00 c0       	rjmp	.+0      	; 0x194 <lcd_init+0x20>
 194:	00 00       	nop
	_delay_ms(5);
	lcd_command(0x30);            // 초기화 명령 반복
 196:	80 e3       	ldi	r24, 0x30	; 48
 198:	d5 df       	rcall	.-86     	; 0x144 <lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19a:	87 e5       	ldi	r24, 0x57	; 87
 19c:	92 e0       	ldi	r25, 0x02	; 2
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <lcd_init+0x2a>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <lcd_init+0x30>
	_delay_us(150);
	lcd_command(0x20);            // 4비트 모드 설정
 1a4:	00 00       	nop
 1a6:	80 e2       	ldi	r24, 0x20	; 32
 1a8:	cd df       	rcall	.-102    	; 0x144 <lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1aa:	8f e1       	ldi	r24, 0x1F	; 31
 1ac:	9e e4       	ldi	r25, 0x4E	; 78
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <lcd_init+0x3a>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <lcd_init+0x40>
	_delay_ms(5);

	// Function set: 4비트 모드, 2라인 디스플레이, 5x7 도트
	lcd_command(0x28);
 1b4:	00 00       	nop
 1b6:	88 e2       	ldi	r24, 0x28	; 40
	// Display ON, Cursor OFF
	lcd_command(0x0C);
 1b8:	c5 df       	rcall	.-118    	; 0x144 <lcd_command>
 1ba:	8c e0       	ldi	r24, 0x0C	; 12
 1bc:	c3 df       	rcall	.-122    	; 0x144 <lcd_command>
	// Clear display
	lcd_command(0x01);
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	c1 df       	rcall	.-126    	; 0x144 <lcd_command>
 1c2:	8f e3       	ldi	r24, 0x3F	; 63
 1c4:	9f e1       	ldi	r25, 0x1F	; 31
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <lcd_init+0x52>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <lcd_init+0x58>
 1cc:	00 00       	nop
 1ce:	08 95       	ret

000001d0 <lcd_clear>:
 1d0:	81 e0       	ldi	r24, 0x01	; 1
	_delay_ms(2);
}

void lcd_clear() {
	lcd_command(0x01); // Clear display
 1d2:	b8 df       	rcall	.-144    	; 0x144 <lcd_command>
 1d4:	8f e3       	ldi	r24, 0x3F	; 63
 1d6:	9f e1       	ldi	r25, 0x1F	; 31
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <lcd_clear+0x8>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <lcd_clear+0xe>
 1de:	00 00       	nop
 1e0:	08 95       	ret

000001e2 <lcd_write_string>:
	_delay_ms(2);
}

void lcd_write_string(const char *str) {
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	ec 01       	movw	r28, r24
	while (*str) {
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <lcd_write_string+0xc>
		lcd_data(*str++); // 문자열의 각 문자를 LCD에 전송
 1ea:	21 96       	adiw	r28, 0x01	; 1
 1ec:	b7 df       	rcall	.-146    	; 0x15c <lcd_data>
	lcd_command(0x01); // Clear display
	_delay_ms(2);
}

void lcd_write_string(const char *str) {
	while (*str) {
 1ee:	88 81       	ld	r24, Y
 1f0:	81 11       	cpse	r24, r1
 1f2:	fb cf       	rjmp	.-10     	; 0x1ea <lcd_write_string+0x8>
		lcd_data(*str++); // 문자열의 각 문자를 LCD에 전송
	}
}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <interrupts_init>:
volatile uint8_t lastButtonState = 0;

// 외부 인터럽트 초기화
void interrupts_init() {
	// INT0 (PD2), INT1 (PD3)를 하강 에지에서 인터럽트 발생하도록 설정 (버튼이 눌릴 때)
	EICRA |= (1 << ISC01) | (1 << ISC11);
 1fa:	ea e6       	ldi	r30, 0x6A	; 106
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	80 81       	ld	r24, Z
 200:	8a 60       	ori	r24, 0x0A	; 10
 202:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0) | (1 << INT1); // INT0, INT1 활성화
 204:	89 b7       	in	r24, 0x39	; 57
 206:	83 60       	ori	r24, 0x03	; 3
 208:	89 bf       	out	0x39, r24	; 57

	sei(); // 전역 인터럽트 활성화
 20a:	78 94       	sei
 20c:	08 95       	ret

0000020e <__vector_1>:
}

// INT0 인터럽트 서비스 루틴
ISR(INT0_vect) {
 20e:	1f 92       	push	r1
 210:	0f 92       	push	r0
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	0f 92       	push	r0
 216:	11 24       	eor	r1, r1
 218:	0b b6       	in	r0, 0x3b	; 59
 21a:	0f 92       	push	r0
 21c:	2f 93       	push	r18
 21e:	3f 93       	push	r19
 220:	4f 93       	push	r20
 222:	5f 93       	push	r21
 224:	6f 93       	push	r22
 226:	7f 93       	push	r23
 228:	8f 93       	push	r24
 22a:	9f 93       	push	r25
 22c:	af 93       	push	r26
 22e:	bf 93       	push	r27
 230:	ef 93       	push	r30
 232:	ff 93       	push	r31
	if (lastButtonState != 1) {
 234:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 238:	81 30       	cpi	r24, 0x01	; 1
 23a:	41 f0       	breq	.+16     	; 0x24c <__vector_1+0x3e>
		lastButtonState = 1;
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
		lcd_clear();
 242:	c6 df       	rcall	.-116    	; 0x1d0 <lcd_clear>
		lcd_write_string("A");
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	91 e0       	ldi	r25, 0x01	; 1
 248:	cc df       	rcall	.-104    	; 0x1e2 <lcd_write_string>
 24a:	06 c0       	rjmp	.+12     	; 0x258 <__vector_1+0x4a>
		} else {
		lastButtonState = 0;
 24c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
		lcd_clear();
		lcd_write_string("Hello, World!");
 250:	bf df       	rcall	.-130    	; 0x1d0 <lcd_clear>
 252:	82 e0       	ldi	r24, 0x02	; 2
 254:	91 e0       	ldi	r25, 0x01	; 1
 256:	c5 df       	rcall	.-118    	; 0x1e2 <lcd_write_string>
	}
}
 258:	ff 91       	pop	r31
 25a:	ef 91       	pop	r30
 25c:	bf 91       	pop	r27
 25e:	af 91       	pop	r26
 260:	9f 91       	pop	r25
 262:	8f 91       	pop	r24
 264:	7f 91       	pop	r23
 266:	6f 91       	pop	r22
 268:	5f 91       	pop	r21
 26a:	4f 91       	pop	r20
 26c:	3f 91       	pop	r19
 26e:	2f 91       	pop	r18
 270:	0f 90       	pop	r0
 272:	0b be       	out	0x3b, r0	; 59
 274:	0f 90       	pop	r0
 276:	0f be       	out	0x3f, r0	; 63
 278:	0f 90       	pop	r0
 27a:	1f 90       	pop	r1
 27c:	18 95       	reti

0000027e <__vector_2>:

// INT1 인터럽트 서비스 루틴
ISR(INT1_vect) {
 27e:	1f 92       	push	r1
 280:	0f 92       	push	r0
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	0f 92       	push	r0
 286:	11 24       	eor	r1, r1
 288:	0b b6       	in	r0, 0x3b	; 59
 28a:	0f 92       	push	r0
 28c:	2f 93       	push	r18
 28e:	3f 93       	push	r19
 290:	4f 93       	push	r20
 292:	5f 93       	push	r21
 294:	6f 93       	push	r22
 296:	7f 93       	push	r23
 298:	8f 93       	push	r24
 29a:	9f 93       	push	r25
 29c:	af 93       	push	r26
 29e:	bf 93       	push	r27
 2a0:	ef 93       	push	r30
 2a2:	ff 93       	push	r31
	if (lastButtonState != 2) {
 2a4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 2a8:	82 30       	cpi	r24, 0x02	; 2
 2aa:	41 f0       	breq	.+16     	; 0x2bc <__vector_2+0x3e>
		lastButtonState = 2;
 2ac:	82 e0       	ldi	r24, 0x02	; 2
 2ae:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
		lcd_clear();
 2b2:	8e df       	rcall	.-228    	; 0x1d0 <lcd_clear>
		lcd_write_string("B");
 2b4:	80 e1       	ldi	r24, 0x10	; 16
 2b6:	91 e0       	ldi	r25, 0x01	; 1
 2b8:	94 df       	rcall	.-216    	; 0x1e2 <lcd_write_string>
 2ba:	06 c0       	rjmp	.+12     	; 0x2c8 <__vector_2+0x4a>
		} else {
		lastButtonState = 0;
 2bc:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
		lcd_clear();
		lcd_write_string("Hello, World!");
 2c0:	87 df       	rcall	.-242    	; 0x1d0 <lcd_clear>
 2c2:	82 e0       	ldi	r24, 0x02	; 2
 2c4:	91 e0       	ldi	r25, 0x01	; 1
 2c6:	8d df       	rcall	.-230    	; 0x1e2 <lcd_write_string>
	}
}
 2c8:	ff 91       	pop	r31
 2ca:	ef 91       	pop	r30
 2cc:	bf 91       	pop	r27
 2ce:	af 91       	pop	r26
 2d0:	9f 91       	pop	r25
 2d2:	8f 91       	pop	r24
 2d4:	7f 91       	pop	r23
 2d6:	6f 91       	pop	r22
 2d8:	5f 91       	pop	r21
 2da:	4f 91       	pop	r20
 2dc:	3f 91       	pop	r19
 2de:	2f 91       	pop	r18
 2e0:	0f 90       	pop	r0
 2e2:	0b be       	out	0x3b, r0	; 59
 2e4:	0f 90       	pop	r0
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	0f 90       	pop	r0
 2ea:	1f 90       	pop	r1
 2ec:	18 95       	reti

000002ee <check_button_c>:

// PD4 버튼 감지 함수 (폴링 방식)
void check_button_c() {
	if (!(PIND & (1 << BUTTON_C))) { // 버튼 C가 눌렸을 때
 2ee:	84 99       	sbic	0x10, 4	; 16
 2f0:	1f c0       	rjmp	.+62     	; 0x330 <check_button_c+0x42>
 2f2:	2f ef       	ldi	r18, 0xFF	; 255
 2f4:	80 e7       	ldi	r24, 0x70	; 112
 2f6:	92 e0       	ldi	r25, 0x02	; 2
 2f8:	21 50       	subi	r18, 0x01	; 1
 2fa:	80 40       	sbci	r24, 0x00	; 0
 2fc:	90 40       	sbci	r25, 0x00	; 0
 2fe:	e1 f7       	brne	.-8      	; 0x2f8 <check_button_c+0xa>
 300:	00 c0       	rjmp	.+0      	; 0x302 <check_button_c+0x14>
 302:	00 00       	nop
		_delay_ms(50); // 디바운싱 처리
		if (!(PIND & (1 << BUTTON_C))) {
 304:	84 99       	sbic	0x10, 4	; 16
 306:	14 c0       	rjmp	.+40     	; 0x330 <check_button_c+0x42>
			if (lastButtonState != 3) {
 308:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 30c:	83 30       	cpi	r24, 0x03	; 3
 30e:	41 f0       	breq	.+16     	; 0x320 <check_button_c+0x32>
				lastButtonState = 3;
 310:	83 e0       	ldi	r24, 0x03	; 3
 312:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
				lcd_clear();
 316:	5c df       	rcall	.-328    	; 0x1d0 <lcd_clear>
				lcd_write_string("C");
 318:	82 e1       	ldi	r24, 0x12	; 18
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	62 df       	rcall	.-316    	; 0x1e2 <lcd_write_string>
 31e:	06 c0       	rjmp	.+12     	; 0x32c <check_button_c+0x3e>
				} else {
				lastButtonState = 0;
 320:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
				lcd_clear();
				lcd_write_string("Hello, World!");
 324:	55 df       	rcall	.-342    	; 0x1d0 <lcd_clear>
 326:	82 e0       	ldi	r24, 0x02	; 2
 328:	91 e0       	ldi	r25, 0x01	; 1
 32a:	5b df       	rcall	.-330    	; 0x1e2 <lcd_write_string>
			}
			while (!(PIND & (1 << BUTTON_C))); // 버튼이 눌린 상태에서 떼어질 때까지 대기 (재입력 방지)
 32c:	84 9b       	sbis	0x10, 4	; 16
 32e:	fe cf       	rjmp	.-4      	; 0x32c <check_button_c+0x3e>
 330:	08 95       	ret

00000332 <main>:
	}
}

int main() {
	// 초기화
	i2c_init();         // I2C 초기화
 332:	ca de       	rcall	.-620    	; 0xc8 <i2c_init>
	lcd_init();         // LCD 초기화
 334:	1f df       	rcall	.-450    	; 0x174 <lcd_init>
	interrupts_init();  // 외부 인터럽트 초기화
 336:	61 df       	rcall	.-318    	; 0x1fa <interrupts_init>
 338:	81 b3       	in	r24, 0x11	; 17

	// PD4 버튼 입력 설정 및 풀업 저항 활성화
	DDRD &= ~(1 << BUTTON_C);
 33a:	8f 7e       	andi	r24, 0xEF	; 239
 33c:	81 bb       	out	0x11, r24	; 17
 33e:	82 b3       	in	r24, 0x12	; 18
	PORTD |= (1 << BUTTON_C);
 340:	80 61       	ori	r24, 0x10	; 16
 342:	82 bb       	out	0x12, r24	; 18

	lcd_clear();        // 화면 지우기
 344:	45 df       	rcall	.-374    	; 0x1d0 <lcd_clear>
	lcd_write_string("Hello, World!"); // 기본 메시지 출력
 346:	82 e0       	ldi	r24, 0x02	; 2
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	4b df       	rcall	.-362    	; 0x1e2 <lcd_write_string>
 34c:	d0 df       	rcall	.-96     	; 0x2ee <check_button_c>

	while (1) {
		// 폴링 방식으로 PD4 버튼 확인
		check_button_c();
 34e:	fe cf       	rjmp	.-4      	; 0x34c <main+0x1a>

00000350 <_exit>:
 350:	f8 94       	cli

00000352 <__stop_program>:
 352:	ff cf       	rjmp	.-2      	; 0x352 <__stop_program>
