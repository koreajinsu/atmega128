
FND_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000002fa  0000038e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010a  0080010a  00000398  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000093a  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000846  00000000  00000000  00000d6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000347  00000000  00000000  000015b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  000018f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043a  00000000  00000000  0000193c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001b3  00000000  00000000  00001d76  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001f29  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ef       	ldi	r30, 0xFA	; 250
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 30       	cpi	r26, 0x0B	; 11
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	e0 d0       	rcall	.+448    	; 0x284 <main>
  c4:	18 c1       	rjmp	.+560    	; 0x2f6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <FND_Display>:
	}
}


void FND_Display(uint16_t data)
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	2a 97       	sbiw	r28, 0x0a	; 10
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	f8 94       	cli
  d6:	de bf       	out	0x3e, r29	; 62
  d8:	0f be       	out	0x3f, r0	; 63
  da:	cd bf       	out	0x3d, r28	; 61
  dc:	ac 01       	movw	r20, r24
	static uint8_t position = 0;	// 디지트 선택 변수
	uint8_t fndData[]=
  de:	8a e0       	ldi	r24, 0x0A	; 10
  e0:	e0 e0       	ldi	r30, 0x00	; 0
  e2:	f1 e0       	ldi	r31, 0x01	; 1
  e4:	de 01       	movw	r26, r28
  e6:	11 96       	adiw	r26, 0x01	; 1
  e8:	01 90       	ld	r0, Z+
  ea:	0d 92       	st	X+, r0
  ec:	8a 95       	dec	r24
  ee:	e1 f7       	brne	.-8      	; 0xe8 <FND_Display+0x20>
	{0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x27, 0x7F, 0x67};
	
	switch (position)
  f0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	49 f1       	breq	.+82     	; 0x14a <FND_Display+0x82>
  f8:	38 f0       	brcs	.+14     	; 0x108 <FND_Display+0x40>
  fa:	82 30       	cpi	r24, 0x02	; 2
  fc:	09 f4       	brne	.+2      	; 0x100 <FND_Display+0x38>
  fe:	59 c0       	rjmp	.+178    	; 0x1b2 <FND_Display+0xea>
 100:	83 30       	cpi	r24, 0x03	; 3
 102:	09 f4       	brne	.+2      	; 0x106 <FND_Display+0x3e>
 104:	88 c0       	rjmp	.+272    	; 0x216 <FND_Display+0x14e>
 106:	af c0       	rjmp	.+350    	; 0x266 <FND_Display+0x19e>
	{
		case 0:
		// 첫번째 자리수를 표기 하기 위해
		// 1번핀 LOW, 2,3,4번핀 HIGH
		FND_SELECT_PORT &= ~(1<<0);
 108:	e5 e6       	ldi	r30, 0x65	; 101
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	8e 7f       	andi	r24, 0xFE	; 254
 110:	80 83       	st	Z, r24
		// FND_SELECT_PORT = FND_SELECT_PORT & ~(1<<0);
		FND_SELECT_PORT |= (1<<1) | (1<<2) | (1<<3);
 112:	80 81       	ld	r24, Z
 114:	8e 60       	ori	r24, 0x0E	; 14
 116:	80 83       	st	Z, r24
		// FND_SELECT_PORT = FND_SELECT_PORT |(1<<1) | (1<<2) | (1<<3);
		// 입력된 데이터의 천의 자리를 구하기 위해
		FND_DATA_PORT = fndData[data/1000];
 118:	9a 01       	movw	r18, r20
 11a:	36 95       	lsr	r19
 11c:	27 95       	ror	r18
 11e:	36 95       	lsr	r19
 120:	27 95       	ror	r18
 122:	36 95       	lsr	r19
 124:	27 95       	ror	r18
 126:	a5 ec       	ldi	r26, 0xC5	; 197
 128:	b0 e2       	ldi	r27, 0x20	; 32
 12a:	d6 d0       	rcall	.+428    	; 0x2d8 <__umulhisi3>
 12c:	92 95       	swap	r25
 12e:	82 95       	swap	r24
 130:	8f 70       	andi	r24, 0x0F	; 15
 132:	89 27       	eor	r24, r25
 134:	9f 70       	andi	r25, 0x0F	; 15
 136:	89 27       	eor	r24, r25
 138:	e1 e0       	ldi	r30, 0x01	; 1
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	ec 0f       	add	r30, r28
 13e:	fd 1f       	adc	r31, r29
 140:	e8 0f       	add	r30, r24
 142:	f9 1f       	adc	r31, r25
 144:	80 81       	ld	r24, Z
 146:	85 bb       	out	0x15, r24	; 21
		break;
 148:	8e c0       	rjmp	.+284    	; 0x266 <FND_Display+0x19e>
		
		case 1:
		FND_SELECT_PORT &= ~(1<<1);
 14a:	e5 e6       	ldi	r30, 0x65	; 101
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	8d 7f       	andi	r24, 0xFD	; 253
 152:	80 83       	st	Z, r24
		FND_SELECT_PORT |= (1<<0) | (1<<2) | (1<<3);
 154:	80 81       	ld	r24, Z
 156:	8d 60       	ori	r24, 0x0D	; 13
 158:	80 83       	st	Z, r24
		FND_DATA_PORT = fndData[data/100%10];
 15a:	9a 01       	movw	r18, r20
 15c:	36 95       	lsr	r19
 15e:	27 95       	ror	r18
 160:	36 95       	lsr	r19
 162:	27 95       	ror	r18
 164:	ab e7       	ldi	r26, 0x7B	; 123
 166:	b4 e1       	ldi	r27, 0x14	; 20
 168:	b7 d0       	rcall	.+366    	; 0x2d8 <__umulhisi3>
 16a:	ac 01       	movw	r20, r24
 16c:	56 95       	lsr	r21
 16e:	47 95       	ror	r20
 170:	9a 01       	movw	r18, r20
 172:	ad ec       	ldi	r26, 0xCD	; 205
 174:	bc ec       	ldi	r27, 0xCC	; 204
 176:	b0 d0       	rcall	.+352    	; 0x2d8 <__umulhisi3>
 178:	96 95       	lsr	r25
 17a:	87 95       	ror	r24
 17c:	96 95       	lsr	r25
 17e:	87 95       	ror	r24
 180:	96 95       	lsr	r25
 182:	87 95       	ror	r24
 184:	9c 01       	movw	r18, r24
 186:	22 0f       	add	r18, r18
 188:	33 1f       	adc	r19, r19
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	82 0f       	add	r24, r18
 198:	93 1f       	adc	r25, r19
 19a:	9a 01       	movw	r18, r20
 19c:	28 1b       	sub	r18, r24
 19e:	39 0b       	sbc	r19, r25
 1a0:	e1 e0       	ldi	r30, 0x01	; 1
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	ec 0f       	add	r30, r28
 1a6:	fd 1f       	adc	r31, r29
 1a8:	e2 0f       	add	r30, r18
 1aa:	f3 1f       	adc	r31, r19
 1ac:	80 81       	ld	r24, Z
 1ae:	85 bb       	out	0x15, r24	; 21
		break;
 1b0:	5a c0       	rjmp	.+180    	; 0x266 <FND_Display+0x19e>
		
		case  2:
		FND_SELECT_PORT &= ~(1<<2);
 1b2:	e5 e6       	ldi	r30, 0x65	; 101
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	8b 7f       	andi	r24, 0xFB	; 251
 1ba:	80 83       	st	Z, r24
		FND_SELECT_PORT |= (1<<0) | (1<<1) | (1<<3);
 1bc:	80 81       	ld	r24, Z
 1be:	8b 60       	ori	r24, 0x0B	; 11
 1c0:	80 83       	st	Z, r24
		FND_DATA_PORT = fndData[data/10%10];
 1c2:	9a 01       	movw	r18, r20
 1c4:	ad ec       	ldi	r26, 0xCD	; 205
 1c6:	bc ec       	ldi	r27, 0xCC	; 204
 1c8:	87 d0       	rcall	.+270    	; 0x2d8 <__umulhisi3>
 1ca:	ac 01       	movw	r20, r24
 1cc:	56 95       	lsr	r21
 1ce:	47 95       	ror	r20
 1d0:	56 95       	lsr	r21
 1d2:	47 95       	ror	r20
 1d4:	56 95       	lsr	r21
 1d6:	47 95       	ror	r20
 1d8:	9a 01       	movw	r18, r20
 1da:	7e d0       	rcall	.+252    	; 0x2d8 <__umulhisi3>
 1dc:	96 95       	lsr	r25
 1de:	87 95       	ror	r24
 1e0:	96 95       	lsr	r25
 1e2:	87 95       	ror	r24
 1e4:	96 95       	lsr	r25
 1e6:	87 95       	ror	r24
 1e8:	9c 01       	movw	r18, r24
 1ea:	22 0f       	add	r18, r18
 1ec:	33 1f       	adc	r19, r19
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	82 0f       	add	r24, r18
 1fc:	93 1f       	adc	r25, r19
 1fe:	9a 01       	movw	r18, r20
 200:	28 1b       	sub	r18, r24
 202:	39 0b       	sbc	r19, r25
 204:	e1 e0       	ldi	r30, 0x01	; 1
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	ec 0f       	add	r30, r28
 20a:	fd 1f       	adc	r31, r29
 20c:	e2 0f       	add	r30, r18
 20e:	f3 1f       	adc	r31, r19
 210:	80 81       	ld	r24, Z
 212:	85 bb       	out	0x15, r24	; 21
		break;
 214:	28 c0       	rjmp	.+80     	; 0x266 <FND_Display+0x19e>
		
		case 3:
		FND_SELECT_PORT &= ~(1<<3);
 216:	e5 e6       	ldi	r30, 0x65	; 101
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	87 7f       	andi	r24, 0xF7	; 247
 21e:	80 83       	st	Z, r24
		FND_SELECT_PORT |= (1<<0) | (1<<1) | (1<<2);
 220:	80 81       	ld	r24, Z
 222:	87 60       	ori	r24, 0x07	; 7
		FND_DATA_PORT = fndData[data%10];
 224:	80 83       	st	Z, r24
 226:	9a 01       	movw	r18, r20
 228:	ad ec       	ldi	r26, 0xCD	; 205
 22a:	bc ec       	ldi	r27, 0xCC	; 204
 22c:	55 d0       	rcall	.+170    	; 0x2d8 <__umulhisi3>
 22e:	96 95       	lsr	r25
 230:	87 95       	ror	r24
 232:	96 95       	lsr	r25
 234:	87 95       	ror	r24
 236:	96 95       	lsr	r25
 238:	87 95       	ror	r24
 23a:	9c 01       	movw	r18, r24
 23c:	22 0f       	add	r18, r18
 23e:	33 1f       	adc	r19, r19
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	82 0f       	add	r24, r18
 24e:	93 1f       	adc	r25, r19
 250:	9a 01       	movw	r18, r20
 252:	28 1b       	sub	r18, r24
 254:	39 0b       	sbc	r19, r25
 256:	e1 e0       	ldi	r30, 0x01	; 1
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	ec 0f       	add	r30, r28
 25c:	fd 1f       	adc	r31, r29
 25e:	e2 0f       	add	r30, r18
 260:	f3 1f       	adc	r31, r19
 262:	80 81       	ld	r24, Z
 264:	85 bb       	out	0x15, r24	; 21
		break;
	}
	position++;		//다음 자리수 이동
 266:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 26a:	8f 5f       	subi	r24, 0xFF	; 255
	position = position % 4;
 26c:	83 70       	andi	r24, 0x03	; 3
 26e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 272:	2a 96       	adiw	r28, 0x0a	; 10
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	f8 94       	cli
 278:	de bf       	out	0x3e, r29	; 62
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	cd bf       	out	0x3d, r28	; 61
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	08 95       	ret

00000284 <main>:

void FND_Display(uint16_t data);	// 출력함수, 4자리수 -> 16비트임

int main(void)
{
	FND_DATA_DDR = 0xff;	// 데이터 출력 설정
 284:	8f ef       	ldi	r24, 0xFF	; 255
 286:	84 bb       	out	0x14, r24	; 20
	FND_SELECT_DDR = 0xff;	// 디지트 출력 설정
 288:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	FND_SELECT_PORT = 0x00;	// 디지트 출력 0V 로 시작
 28c:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
	
	uint16_t count = 0;		// 카운트 갯수 증가
	uint32_t timeTick = 0;	// 시간을 셀수 있는 변수 (틱)
	uint32_t prevTime = 0;	// 이전 시간을 저장하는 변수
 290:	81 2c       	mov	r8, r1
 292:	91 2c       	mov	r9, r1
 294:	54 01       	movw	r10, r8
	FND_DATA_DDR = 0xff;	// 데이터 출력 설정
	FND_SELECT_DDR = 0xff;	// 디지트 출력 설정
	FND_SELECT_PORT = 0x00;	// 디지트 출력 0V 로 시작
	
	uint16_t count = 0;		// 카운트 갯수 증가
	uint32_t timeTick = 0;	// 시간을 셀수 있는 변수 (틱)
 296:	c1 2c       	mov	r12, r1
 298:	d1 2c       	mov	r13, r1
 29a:	76 01       	movw	r14, r12
{
	FND_DATA_DDR = 0xff;	// 데이터 출력 설정
	FND_SELECT_DDR = 0xff;	// 디지트 출력 설정
	FND_SELECT_PORT = 0x00;	// 디지트 출력 0V 로 시작
	
	uint16_t count = 0;		// 카운트 갯수 증가
 29c:	c0 e0       	ldi	r28, 0x00	; 0
 29e:	d0 e0       	ldi	r29, 0x00	; 0
	uint32_t timeTick = 0;	// 시간을 셀수 있는 변수 (틱)
	uint32_t prevTime = 0;	// 이전 시간을 저장하는 변수
	
	while (1)
	{
		FND_Display(count);	//출력 함수 호출 -> 카운트값이 증가
 2a0:	ce 01       	movw	r24, r28
 2a2:	12 df       	rcall	.-476    	; 0xc8 <FND_Display>
		if(timeTick - prevTime > 100)	// 100ms 지날때마다 카운트 1증가
 2a4:	d7 01       	movw	r26, r14
 2a6:	c6 01       	movw	r24, r12
 2a8:	88 19       	sub	r24, r8
 2aa:	99 09       	sbc	r25, r9
 2ac:	aa 09       	sbc	r26, r10
 2ae:	bb 09       	sbc	r27, r11
 2b0:	85 36       	cpi	r24, 0x65	; 101
 2b2:	91 05       	cpc	r25, r1
 2b4:	a1 05       	cpc	r26, r1
 2b6:	b1 05       	cpc	r27, r1
 2b8:	18 f0       	brcs	.+6      	; 0x2c0 <main+0x3c>
		{
			prevTime = timeTick;	// 현재시간을 저장
			count++;
 2ba:	21 96       	adiw	r28, 0x01	; 1
	while (1)
	{
		FND_Display(count);	//출력 함수 호출 -> 카운트값이 증가
		if(timeTick - prevTime > 100)	// 100ms 지날때마다 카운트 1증가
		{
			prevTime = timeTick;	// 현재시간을 저장
 2bc:	46 01       	movw	r8, r12
 2be:	57 01       	movw	r10, r14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c0:	8f e9       	ldi	r24, 0x9F	; 159
 2c2:	9f e0       	ldi	r25, 0x0F	; 15
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <main+0x40>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <main+0x46>
 2ca:	00 00       	nop
			count++;
		}
		_delay_ms(1);	// 딜레이 1ms
		timeTick++;		// 시간을 세는 변수 1증가
 2cc:	9f ef       	ldi	r25, 0xFF	; 255
 2ce:	c9 1a       	sub	r12, r25
 2d0:	d9 0a       	sbc	r13, r25
 2d2:	e9 0a       	sbc	r14, r25
 2d4:	f9 0a       	sbc	r15, r25
	}
 2d6:	e4 cf       	rjmp	.-56     	; 0x2a0 <main+0x1c>

000002d8 <__umulhisi3>:
 2d8:	a2 9f       	mul	r26, r18
 2da:	b0 01       	movw	r22, r0
 2dc:	b3 9f       	mul	r27, r19
 2de:	c0 01       	movw	r24, r0
 2e0:	a3 9f       	mul	r26, r19
 2e2:	70 0d       	add	r23, r0
 2e4:	81 1d       	adc	r24, r1
 2e6:	11 24       	eor	r1, r1
 2e8:	91 1d       	adc	r25, r1
 2ea:	b2 9f       	mul	r27, r18
 2ec:	70 0d       	add	r23, r0
 2ee:	81 1d       	adc	r24, r1
 2f0:	11 24       	eor	r1, r1
 2f2:	91 1d       	adc	r25, r1
 2f4:	08 95       	ret

000002f6 <_exit>:
 2f6:	f8 94       	cli

000002f8 <__stop_program>:
 2f8:	ff cf       	rjmp	.-2      	; 0x2f8 <__stop_program>
