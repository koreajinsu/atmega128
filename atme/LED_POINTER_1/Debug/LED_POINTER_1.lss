
LED_POINTER_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a04  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008e8  00000000  00000000  00000c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000039f  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  000018a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000442  00000000  00000000  00001930  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000120  00000000  00000000  00001d72  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001e92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	13 d0       	rcall	.+38     	; 0xc0 <main>
  9a:	2f c0       	rjmp	.+94     	; 0xfa <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <GPIO_LEDInit>:

//led를 좌측으로 이동하는 함수
void ledleftshift(uint8_t *data)
{
	*data =(*data >> 7) | (*data << 1);
	GPIO_output(*data); //위에서 저장한 값을 GPIO_output에 던져준다.
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	81 bb       	out	0x11, r24	; 17
  a2:	08 95       	ret

000000a4 <GPIO_output>:
  a4:	88 bb       	out	0x18, r24	; 24
  a6:	08 95       	ret

000000a8 <ledrightshift>:
}

//LED를 우측으로 이동하는 함수
void ledrightshift(uint8_t *data)
{
  a8:	fc 01       	movw	r30, r24
	*data = (*data << 7) | (*data >>1); //   <<7 을 이용해서 00으로 초기화 시킨다음에 >>1 을 이용해서 다시 1칸씩 shift 한다.
  aa:	90 81       	ld	r25, Z
  ac:	80 e8       	ldi	r24, 0x80	; 128
  ae:	98 9f       	mul	r25, r24
  b0:	90 01       	movw	r18, r0
  b2:	11 24       	eor	r1, r1
  b4:	96 95       	lsr	r25
  b6:	89 2f       	mov	r24, r25
  b8:	82 2b       	or	r24, r18
  ba:	80 83       	st	Z, r24
	GPIO_output(*data);
  bc:	f3 cf       	rjmp	.-26     	; 0xa4 <GPIO_output>
  be:	08 95       	ret

000000c0 <main>:
#include <util/delay.h>

#include "led.h"

int main(void)
{
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	1f 92       	push	r1
  c6:	cd b7       	in	r28, 0x3d	; 61
  c8:	de b7       	in	r29, 0x3e	; 62
	GPIO_LEDInit(); //ddrb = 0xff;
  ca:	e9 df       	rcall	.-46     	; 0x9e <GPIO_LEDInit>
	uint8_t ledData = 0x80; //0b00000001; //변수 선언후 바로 초기화
  cc:	80 e8       	ldi	r24, 0x80	; 128
  ce:	89 83       	std	Y+1, r24	; 0x01
	
	while (1)
	{
		for(int i=0; i<7; i++)
  d0:	00 e0       	ldi	r16, 0x00	; 0
  d2:	10 e0       	ldi	r17, 0x00	; 0
  d4:	0e c0       	rjmp	.+28     	; 0xf2 <main+0x32>
		{
			//ledleftshift(&ledData);  //메인문안에있는 leddata주소를 ledleftshift한테 전달한다.
			ledrightshift(&ledData);
  d6:	ce 01       	movw	r24, r28
  d8:	01 96       	adiw	r24, 0x01	; 1
  da:	e6 df       	rcall	.-52     	; 0xa8 <ledrightshift>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	2f ef       	ldi	r18, 0xFF	; 255
  de:	85 ea       	ldi	r24, 0xA5	; 165
  e0:	9e e0       	ldi	r25, 0x0E	; 14
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x22>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x2c>
  ec:	00 00       	nop
	GPIO_LEDInit(); //ddrb = 0xff;
	uint8_t ledData = 0x80; //0b00000001; //변수 선언후 바로 초기화
	
	while (1)
	{
		for(int i=0; i<7; i++)
  ee:	0f 5f       	subi	r16, 0xFF	; 255
  f0:	1f 4f       	sbci	r17, 0xFF	; 255
  f2:	07 30       	cpi	r16, 0x07	; 7
  f4:	11 05       	cpc	r17, r1
  f6:	7c f3       	brlt	.-34     	; 0xd6 <main+0x16>
  f8:	eb cf       	rjmp	.-42     	; 0xd0 <main+0x10>

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
